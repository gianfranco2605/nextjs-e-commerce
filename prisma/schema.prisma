generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String @id @default(uuid())
  name    String @unique
  Product Product[]
}

model Product {
  id           String @id @default(uuid())
  title        String
  description  String
  inStock      Int
  price        Float @default(0)
  sizes        Size[] @default([])
  slug         String @unique
  tags         String[] @default([])
  gender       Gender
  // Relations
  category     Category @relation(fields: [ categoryId ], references: [id])
  categoryId   String
  ProductImage ProductImage[]

  @@index([gender])

   OrderItem OrderItem[]
}

model ProductImage {
  id        Int @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String

}

model User {
  id            String @id @default(uuid())
  name          String
  email         String @unique
  emailVerified DateTime?
  password      String
  role          Role @default(user)
  image         String?

  address UserAddress?

  // Relation
  Order Order[]
}


model Country {
  id   String @id 
  name String
  userAddress UserAddress[]

  OrderAddress OrderAddress[]
}

model UserAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  city String
  phone String


  // Relations
  country Country @relation(fields: [countryId], references: [id])
  countryId String

  user User @relation(fields: [userId], references: [id])
  userId String @unique

}

//Orders

model Order {
  id String @id @default(uuid())
  subTotal Float
  tax Float
  itemsInOrder Int
  isPaid Boolean
  paidAt DateTime?

  createdAt DateTime @default(now())
  upDatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  userId String

  OrderItem OrderItem[]
  OrderAddress OrderAddress?

}


model OrderItem {
  id String @id @default(uuid())
  quantity Int
  price Float
  size Size

  // Relations 
  order Order @relation(fields: [orderId], references: [id])
  orderId String

  product Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  city String
  phone String

  // Relations 
  country Country @relation(fields: [countryId], references: [id])
  countryId String

  Order Order @relation(fields: [orderId], references: [id])
  orderId String @unique

}